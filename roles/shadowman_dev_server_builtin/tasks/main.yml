---
- name: Discover latest version of code-server
  ansible.builtin.set_fact:
    version: "{{ (lookup('url', 'https://api.github.com/repos/coder/code-server/releases/latest', headers=_github_api_headers, split_lines=False) | from_json).get('tag_name')
      | replace('v', '') }}"
  run_once: true
  until: version is version('0.0.0', '>=')
  retries: 10
  when: version == "latest"

- name: Download code-server
  ansible.builtin.get_url:
    url: "{{ codeserver_url }}"
    dest: /tmp/code-server.rpm
    mode: "0440"

- name: Install Code Server
  ansible.builtin.dnf:
    name: /tmp/code-server.rpm
    state: present
    disable_gpg_check: true
  notify: Restart_Codeserver

- name: Ensure certs directory exists
  ansible.builtin.file:
    path: "{{ certandkeydestfolder }}"
    state: directory
    owner: root
    group: root
    mode: "0741"
  when: cert_name is defined

- name: Copy Cert
  ansible.builtin.copy:
    src: "{{ certandkeysourcefolder }}{{ cert_name }}"
    dest: "{{ certandkeydestfolder }}{{ cert_name }}"
    owner: root
    group: wheel
    mode: "0644"
  when: cert_name is defined

- name: Copy Key
  ansible.builtin.copy:
    src: "{{ certandkeysourcefolder }}{{ key_name }}"
    dest: "{{ certandkeydestfolder }}{{ key_name }}"
    owner: root
    group: wheel
    mode: "0644"
  when: key_name is defined

- name: Apply our systemd service file
  ansible.builtin.template:
    src: code-server.service.j2
    dest: /etc/systemd/system/code-server@{{ username }}.service
    owner: "{{ username }}"
    group: wheel
    mode: "0744"
  notify: Restart_Codeserver

- name: Ensure custom facts directory exists
  ansible.builtin.file:
    path: /home/{{ username }}/.local/share/code-server/User/
    recurse: true
    state: directory
    owner: "{{ username }}"

- name: Ensure settings directory exists
  ansible.builtin.file:
    path: /home/{{ username }}/.config/code-server/
    recurse: true
    state: directory
    owner: "{{ username }}"

- name: Ensure podman config location exists
  ansible.builtin.file:
    path: /home/{{ username }}/.config/containers/
    recurse: true
    state: directory
    owner: "{{ username }}"
  when: additionalimagestores is defined

- name: Ensure ansible directory exists
  ansible.builtin.file:
    path: /home/{{ username }}/ansible/localplaybooks/
    recurse: true
    state: directory
    owner: "{{ username }}"

- name: Ensure ansible group vars folder exists
  ansible.builtin.file:
    path: /home/{{ username }}/ansible/group_vars/
    recurse: true
    state: directory
    owner: "{{ username }}"

- name: Ensure ansible host vars folder exists
  ansible.builtin.file:
    path: /home/{{ username }}/ansible/host_vars/
    recurse: true
    state: directory
    owner: "{{ username }}"

- name: Apply code server defaults
  ansible.builtin.template:
    src: settings.json.j2
    dest: /home/{{ username }}/.local/share/code-server/User/settings.json
    owner: "{{ username }}"
    mode: "0644"

- name: Ensure bashrc is set for user
  ansible.builtin.template:
    src: .bashrc.j2
    dest: /home/{{ username }}/.bashrc
    owner: "{{ username }}"
    mode: "0644"

- name: Apply code server settings
  ansible.builtin.template:
    src: config.yml.j2
    dest: /home/{{ username }}/.config/code-server/config.yaml
    owner: "{{ username }}"
    mode: "0644"
  notify: Restart_Codeserver

- name: Deploy ansible-navigator config
  ansible.builtin.template:
    src: ansible-navigator.yml.j2
    dest: /home/{{ username }}/ansible/ansible-navigator.yml
    owner: "{{ username }}"
    mode: "0644"

- name: Deploy inventory
  ansible.builtin.copy:
    src: inventory
    dest: /home/{{ username }}/ansible/inventory
    owner: "{{ username }}"
    mode: "0644"
  when: deploy_inventory

- name: Deploy ansible group vars folder
  ansible.builtin.copy:
    src: files/group_vars/
    dest: /home/{{ username }}/ansible/group_vars/
    owner: "{{ username }}"
    mode: "0644"
  when: deploy_inventory

- name: Deploy ansible host vars folder
  ansible.builtin.copy:
    src: files/host_vars/
    dest: /home/{{ username }}/ansible/host_vars/
    owner: "{{ username }}"
    mode: "0644"
  when: deploy_inventory

- name: Install ansible extension
  become_user: "{{ username }}"
  become: true
  ansible.builtin.command: /bin/code-server --install-extension redhat.ansible
  register: result
  changed_when: "'was successfully installed' in result.stdout"

- name: Allow code-server to listen on port 443
  ansible.builtin.command: setcap cap_net_bind_service=+ep /usr/lib/code-server/lib/node
  when: dev_server_port == 443

- name: Daemon-reload, enable and start code-server
  ansible.builtin.systemd:
    name: code-server@{{ username }}
    enabled: true
    state: started
    daemon_reload: true

- name: Install podman and git and python 3.9
  ansible.builtin.dnf:
    name:
      - podman
      - git
      - python39
    state: present

- name: Setup shared storage for podman images
  ansible.builtin.template:
    src: storage.conf.j2
    dest: /home/{{ username }}/.config/containers/storage.conf
    owner: "{{ username }}"
    mode: "0644"
  when: additionalimagestores is defined

- name: Install ansible-navigator
  become_user: "{{ username }}"
  become: true
  ansible.builtin.pip:
    name: ansible-navigator
    state: present
    extra_args: --user
    executable: pip3.9

- name: Allocate subuids for user
  subuid:
    user: "{{ username }}"
  register: subuids

- name: Allocate subgids for user
  subgid:
    group: "{{ username }}"
  register: subgids

- name: Ensure changes are applied to podman
  ansible.builtin.command: podman system migrate
  when: subuids is changed or subgids is changed

- name: Check if EE present
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command: podman image exists {{ ansible_image }}
  register: exists
  changed_when: exists.rc == 1
  failed_when: exists.rc > 1

- name: Pull EE only if not present
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command: podman pull --creds={{ registry_user }}:{{ registry_pass }} {{ ansible_image }}
  register: ee
  changed_when: ee.rc == 0
  when:
    - exists.rc == 1
    - additionalimagestores is not defined

- name: Pull example repository
  become: true
  become_user: "{{ username }}"
  ansible.builtin.git:
    repo: https://github.com/shadowman-lab/Ansible-Example.git
    dest: /home/{{ username }}/ansible/ansible-example
    version: main
  when: deploy_example_repo

- name: Create an example role structure using ansible-galaxy
  ansible.builtin.command:
    cmd: ansible-galaxy init ansible-example
    chdir: /tmp/
  delegate_to: localhost
  when: deploy_ansiblegalaxy_repo

- name: Copy Example Structure to VM
  ansible.builtin.copy:
    src: /tmp/ansible-example/
    dest: /home/{{ username }}/ansible/ansible-example
    owner: "{{ username }}"
    mode: "0644"
  when: deploy_ansiblegalaxy_repo

- name: Open up correct port
  ansible.builtin.command: firewall-cmd --permanent --zone=public --add-port={{ dev_server_port }}/tcp
  register: firewall
  changed_when: firewall.rc == 0
  notify: Restart_firewalld

- name: Check if user is lingering
  ansible.builtin.stat:
    path: /var/lib/systemd/linger/{{ username }}
  register: user_lingering

- name: Enable lingering is needed
  ansible.builtin.command: loginctl enable-linger {{ username }}
  when: not user_lingering.stat.exists

- name: Display Weblink
  ansible.builtin.debug:
    msg: https://{{ inventory_hostname }}:{{ dev_server_port }}/?folder=/home/{{ username }}/ansible
